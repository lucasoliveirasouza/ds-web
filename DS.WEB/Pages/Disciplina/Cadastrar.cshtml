@page
@model DS.WEB.Pages.Disciplina.CadastrarDisciplinaModel
@{
    Layout = "_LayoutCadastro";
    ViewData["tituloFuncao"] = "Cadastro de disciplina";
    var idDisciplina = (string)ViewData["idDisciplina"];
}

<div class="row">
    <div class="col-xl-4">
        <label for="Nome" class="d-flex form-label">Nome</label>
        <div class="form-group" data="">
            <div class="input-group" data-target-input="nearest">
                <input type="text" id="Nome" name="Nome" class="form-control" value="" autocomplete="off">
            </div>
        </div>
    </div>

    <div class="col-xl-4">
        <label for="Descricao" class="d-flex form-label">Descrição</label>
        <div class="form-group" data="">
            <div class="input-group" data-target-input="nearest">
                <input type="text" id="Descricao" name="Descricao" class="form-control" value="" autocomplete="off">
            </div>
        </div>
    </div>

    <div class="col-xl-4">
        <vc:pesquisa options="@Html.Pesquisa(m => m.Professor).Action("http://localhost:5187/Professor", "GET")"></vc:pesquisa>
    </div>
</div>

<div class="row">
    <div class="col-xl-4">
        <label for="CargaHoraria" class="d-flex form-label">Carga horaria</label>
        <div class="form-group" data="">
            <div class="input-group" data-target-input="nearest">
                <input type="text" id="CargaHoraria" name="CargaHoraria" class="form-control" value="" autocomplete="off">
            </div>
        </div>
    </div>

    <div class="col-xl-4">
        <label for="HorarioDisciplina" class="d-flex form-label">Horário da disciplina</label>
        <div class="form-group" data="">
            <div class="input-group" data-target-input="nearest">
                <input type="text" id="HorarioDisciplina" name="HorarioDisciplina" class="form-control" value="" autocomplete="off">
            </div>
        </div>
    </div>
</div>

<script defer>
    EventDomContentLoaded(() => {
        const botaoGravar = document.getElementById('gravar');
        const botaoCancelar = document.getElementById('cancelar');
        botaoGravar.addEventListener('click', graveCadastroDisciplina)
        botaoCancelar.addEventListener('click', (ev) => {
            ev.preventDefault();
            new Modal().confirmacao("Tem certeza que deseja cancelar o cadastro?", () =>{
                window.location.href = '/Disciplina/Aterrissagem';
            }).render();
            
        });
        verifiqueEdicao();
    });

async function graveCadastroDisciplina(ev) {
    ev.preventDefault();
    const optionsFetch = {
        url: `${APIHelper.LocalHostDisciplina}/classes`,
        data: {
            description: Descricao.value,
            name: Nome.value,
            schedules: HorarioDisciplina.value,
            teacher_id: Pesquisa_Professor.obtenhaSelecionado().Id,
            total_hours: parseInt(CargaHoraria.value)
        }
        
    }
        console.log(idDisciplina != '');
   
        if (idDisciplina != '') {
            optionsFetch.method = "PUT"
            optionsFetch.url = `${APIHelper.LocalHostDisciplina}/classes/${idDisciplina}`;
            
        }
        const resposta = await postJSON(optionsFetch);
        if (resposta) {
            new Modal().sucesso(idDisciplina ? 'Disciplina editada com sucesso.' : 'Disciplina cadastrado com sucesso.').depoisDeOcultar(() => {
                window.location.href = '/Disciplina/Aterrissagem';
            }).render()
        }
}

    let idDisciplina;
    async function verifiqueEdicao() {
        const professores = await Pesquisa_Professor._filtre();

        idDisciplina = '@Html.Raw(idDisciplina)';
        if (idDisciplina) {
            var url = new URL(`${APIHelper.LocalHostDisciplina}/classes/${idDisciplina}`)
            const options = {
                url: url,
                method: "GET"
            }
            const resposta = await postJSON(options);
            if (resposta) {
                CargaHoraria.value = resposta.total_hours;
                Nome.value =  resposta.name;
                HorarioDisciplina.value = resposta.schedules;
                Descricao.value = resposta.description;

                if (professores.data) {
                    const professorSelecionado = professores.data.find(professor => professor.id == resposta.teacher_id);
                    if (professorSelecionado) {
                        Pesquisa_Professor.definaSelecionado(professorSelecionado);
                    }
                }
            }
        }
    }

</script>